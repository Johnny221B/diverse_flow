# tools/lock_env.py
import subprocess
from pathlib import Path

# 你要“锁定版本”的关键仓库（可按需增删）
ALLOWLIST = {
    # DL 栈
    "torch", "torchvision", "torchaudio",
    "transformers", "accelerate", "diffusers",
    # 科学计算
    "numpy", "pandas", "scipy", "scikit-learn", "scikit-image",
    "einops", "matplotlib", "requests", "tqdm", "pillow",
    # 评测/多媒体
    "piq", "cleanfid", "open-clip-torch", "pytorch-msssim",
    "vendi-score", "opencv-python", "albumentations",
    # 训练/加速
    "xformers", "bitsandbytes", "peft", "deepspeed", "wandb",
    # HF 生态
    "huggingface-hub", "datasets", "tokenizers", "sentencepiece",
    # 实用
    "pydantic", "absl-py", "ml_collections", "aiohttp",
    "fastapi", "uvicorn", "nvidia-ml-py", "openai",
}

def main():
    repo_root = Path(__file__).resolve().parents[1]
    req_path = repo_root / "requirements.txt"

    # 1) 拿到当前环境的 freeze
    out = subprocess.check_output(["pip", "freeze"], text=True)
    lines = [L.strip() for L in out.splitlines() if L.strip() and " @ file:" not in L]

    # 2) 解析 package 名（统一小写），过滤 allowlist
    selected = []
    for L in lines:
        # 常见格式：pkg==ver；也可能是 pkg @ https://...；或 editable (-e)
        name = L.split("==")[0].split("@")[0].strip().lower()
        name = name.replace("_", "-")
        if name in ALLOWLIST:
            selected.append(L)

    # 3) 专门把 torch/torchvision/torchaudio 保留下来（放在文件末尾，便于用 constraints 控制 index-url）
    def is_torch_family(s: str) -> bool:
        n = s.split("==")[0].split("@")[0].strip().lower()
        return n in {"torch", "torchvision", "torchaudio"}

    others = [s for s in selected if not is_torch_family(s)]
    torch3 = [s for s in selected if is_torch_family(s)]

    # 4) 写入 requirements.txt
    header = [
        "# Auto-generated by tools/lock_env.py",
        "# These are the key, version-pinned dependencies for Oscar.",
        "# For Torch wheels, we use constraints/ to pick the correct CUDA index-url.",
        "",
    ]
    with req_path.open("w", encoding="utf-8") as f:
        f.write("\n".join(header))
        for s in sorted(set(others), key=str.lower):
            f.write(s + "\n")
        f.write("\n# Torch family (CUDA wheels selected via constraints/*.txt)\n")
        for s in sorted(set(torch3), key=str.lower):
            f.write(s + "\n")

    print(f"[lock_env] Wrote {req_path} with {len(others)+len(torch3)} pinned packages.")

if __name__ == "__main__":
    main()
